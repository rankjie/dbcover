// Generated by CoffeeScript 1.6.3
var Instance, QueryTable, Validators, toType, _;

toType = require('./utils').toType;

_ = require('lodash');

Validators = require('./validators').Validators;

QueryTable = require('./querytable');

Instance = (function() {
  function Instance(table, pks, nameToField, vals, db, cache, userDefineMethods, primkeys) {
    var field, method, name, _i, _len, _ref;
    this.$table = table;
    this.$pks = _.cloneDeep(pks);
    this.$nameToField = _.cloneDeep(nameToField);
    this.$db = db;
    this.$cache = cache;
    this.$primkeys = primkeys;
    _ref = this.$nameToField;
    for (name in _ref) {
      field = _ref[name];
      field.val = this[name] = vals[name];
    }
    for (_i = 0, _len = userDefineMethods.length; _i < _len; _i++) {
      method = userDefineMethods[_i];
      Instance.prototype[method.name] = method.body;
    }
  }

  Instance.prototype.save = function() {
    var deferred, queryTable, result;
    queryTable = new QueryTable(this.$table, this.$db, this.$cache, null, this.$nameToField);
    result = this.validate();
    if (result.okay) {
      return queryTable.save(this);
    } else {
      deferred = Q.defer();
      return deferred.reject(result.error);
    }
  };

  Instance.prototype.update = function() {
    var deferred, queryTable, result;
    queryTable = new QueryTable(this.$table, this.$db, this.$cache, null, this.$nameToField);
    result = this.validate();
    if (result.okay) {
      return queryTable.update(this);
    } else {
      deferred = Q.defer();
      return deferred.reject(result.error);
    }
  };

  Instance.prototype["delete"] = function() {
    var queryTable;
    queryTable = new QueryTable(this.$table, this.$db, this.$cache, null, this.$nameToField);
    return queryTable["delete"](this);
  };

  Instance.prototype.validate = function() {
    var field, index, name, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    _ref = this.$pks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      index = _ref[_i];
      _ref1 = index.fields;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        name = _ref1[_j];
        if (this[name] == null) {
          return false;
        }
      }
    }
    _ref2 = this.$nameToField;
    for (name in _ref2) {
      field = _ref2[name];
      if ((field.required || field.primkey) && (this[name] == null)) {
        return false;
      }
      if (field.validator != null) {
        if (toType(field.validator) === 'string') {
          return (new Validators[field.validator]).doValidate(this[name]);
        } else {
          return field.validator.doValidate(this[name]);
        }
      }
    }
    return true;
  };

  return Instance;

})();

module.exports = Instance;
