// Generated by CoffeeScript 1.6.3
var EmailValidator, IntegerValidator, NullValidator, StringValidator, Validators, err_msg, toType, validators;

toType = require('./utils').toType;

validators = require('validator');

Validators = {};

err_msg = 'value check failed';

Validators.integer = IntegerValidator = (function() {
  function IntegerValidator(min, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  IntegerValidator.prototype.doValidate = function(num) {
    if (!(validators.isInt(num) && Number(validators) <= this.max && Number(validators) >= this.min)) {
      this.result.error = err_msg;
    }
    return this.result;
  };

  return IntegerValidator;

})();

Validators.string = StringValidator = (function() {
  function StringValidator(minx, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  StringValidator.prototype.doValidate = function(str) {
    if (!validators.isLength(str, this.min, this.max)) {
      this.result.error = err_msg;
    }
    return this.result;
  };

  return StringValidator;

})();

Validators.email = EmailValidator = (function() {
  function EmailValidator() {
    this.result = {};
  }

  EmailValidator.prototype.doValidate = function(str) {
    if (!validators.isEmail(str)) {
      this.result.error = err_msg;
    }
    return this.result;
  };

  return EmailValidator;

})();

Validators.required = NullValidator = (function() {
  function NullValidator() {
    this.result = {};
  }

  NullValidator.prototype.doValidate = function(str) {
    if (!validators.isNull(str)) {
      this.result.error = err_msg;
    }
    return this.result;
  };

  return NullValidator;

})();

exports.Validators = Validators;

exports.IntegerValidator = IntegerValidator;

exports.StringValidator = StringValidator;

exports.EmailValidator = EmailValidator;
