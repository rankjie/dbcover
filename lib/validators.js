// Generated by CoffeeScript 2.5.1
var EmailValidator, IntegerValidator, NullValidator, StringValidator, Validators, err_msg, isEmail, isInt, isString, toType;

({toType} = require('./utils'));

Validators = {};

err_msg = 'value check failed';

isInt = function(n) {
  return toType(n) === 'number' && n % 1 === 0;
};

isString = function(str) {
  return toType(str) === 'string';
};

isEmail = function(email) {
  var re;
  re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
};

Validators.integer = IntegerValidator = class IntegerValidator {
  constructor(min, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  doValidate(num) {
    if (!isInt(num) || num > this.max || num < this.min) {
      this.result.error = err_msg;
    }
    return this.result;
  }

};

Validators.string = StringValidator = class StringValidator {
  constructor(minx, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  doValidate(str) {
    if (!isString(str) || str.length < this.min || str.length > this.max) {
      this.result.error = err_msg;
    }
    return this.result;
  }

};

Validators.email = EmailValidator = class EmailValidator {
  constructor() {
    this.result = {};
  }

  doValidate(str) {
    if (!isEmail(str)) {
      this.result.error = err_msg;
    }
    return this.result;
  }

};

Validators.required = NullValidator = class NullValidator {
  constructor() {
    this.result = {};
  }

  doValidate(str) {
    if (str == null) {
      this.result.error = err_msg;
    }
    return this.result;
  }

};

exports.Validators = Validators;

exports.IntegerValidator = IntegerValidator;

exports.StringValidator = StringValidator;

exports.EmailValidator = EmailValidator;
