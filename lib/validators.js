// Generated by CoffeeScript 1.6.3
var EmailValidator, IntegerValidator, NullValidator, StringValidator, Validators, check, toType;

toType = require('./utils').toType;

check = require('validator').check;

Validators = {};

Validators.integer = IntegerValidator = (function() {
  function IntegerValidator(min, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  IntegerValidator.prototype.doValidate = function(num) {
    var e;
    try {
      check(num).isInt().max(this.max).min(this.min);
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return IntegerValidator;

})();

Validators.string = StringValidator = (function() {
  function StringValidator(minx, max) {
    this.result = {};
    this.min = min;
    this.max = max;
  }

  StringValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(num).len(this.min, this.max);
    } catch (_error) {
      e = _error;
      this.result.error = e.message;
    }
    return this.result;
  };

  return StringValidator;

})();

Validators.email = EmailValidator = (function() {
  function EmailValidator() {
    this.result = {};
  }

  EmailValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(str).isEmail();
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return EmailValidator;

})();

Validators.required = NullValidator = (function() {
  function NullValidator() {
    this.result = {};
  }

  NullValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(str).notNull();
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return NullValidator;

})();

exports.Validators = Validators;

exports.IntegerValidator = IntegerValidator;

exports.StringValidator = StringValidator;

exports.EmailValidator = EmailValidator;
