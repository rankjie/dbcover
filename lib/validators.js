// Generated by CoffeeScript 1.6.3
var EmailValidator, IntegerValidator, NullValidator, StringValidator, Validator, Validators, check, toType,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

toType = require('./utils').toType;

check = require('validator').check;

Validator = (function() {
  function Validator() {
    this.result = {};
  }

  return Validator;

})();

Validators = {};

Validators.integer = IntegerValidator = (function(_super) {
  __extends(IntegerValidator, _super);

  function IntegerValidator(min, max) {
    this.min = min;
    this.max = max;
  }

  IntegerValidator.prototype.doValidate = function(num) {
    var e;
    try {
      check(num).isInt().max(this.max).min(this.min);
      this.result.okay = true;
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return IntegerValidator;

})(Validator);

Validators.string = StringValidator = (function(_super) {
  __extends(StringValidator, _super);

  function StringValidator(minx, max) {
    this.min = min;
    this.max = max;
  }

  StringValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(num).len(this.min, this.max);
      this.result.okay = true;
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return StringValidator;

})(Validator);

Validators.email = EmailValidator = (function(_super) {
  __extends(EmailValidator, _super);

  function EmailValidator() {}

  EmailValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(str).isEmail();
      this.result.okay = true;
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return EmailValidator;

})(Validator);

Validators.required = NullValidator = (function(_super) {
  __extends(NullValidator, _super);

  function NullValidator() {}

  NullValidator.prototype.doValidate = function(str) {
    var e;
    try {
      check(str).isNull();
      this.result.okay = true;
    } catch (_error) {
      e = _error;
      this.result.error = e;
    }
    return this.result;
  };

  return NullValidator;

})(Validator);

exports.Validators = Validators;

exports.IntegerValidator = IntegerValidator;

exports.StringValidator = StringValidator;

exports.EmailValidator = EmailValidator;
