// Generated by CoffeeScript 1.6.3
var Instance, Model, Observe, QueryTable, cache, cacheGroup, createField, db, repoGroup, toType, _;

createField = require('./field').createField;

_ = require('lodash');

db = require('./db/db');

cache = require('./cache/cache');

Instance = require('./instance');

QueryTable = require('./querytable');

toType = require('./utils').toType;

repoGroup = {};

cacheGroup = {};

Observe = (function() {
  function Observe() {}

  Observe.prototype.define = function(cata, config) {
    if (cata === 'repo') {
      repoGroup[config.name] = db(config.provider);
    }
    if (cata === 'cache') {
      return cacheGroup[config.name] = cache(config.provider);
    }
  };

  Observe.prototype.getRepoAll = function() {
    return repoGroup;
  };

  Observe.prototype.getCacheAll = function() {
    return cacheGroup;
  };

  Observe.prototype.endRepoAll = function() {
    var k, v, _results;
    _results = [];
    for (k in repoGroup) {
      v = repoGroup[k];
      _results.push(v.end());
    }
    return _results;
  };

  Observe.prototype.endCacheAll = function() {
    var k, v, _results;
    _results = [];
    for (k in cacheGroup) {
      v = cacheGroup[k];
      _results.push(v.end());
    }
    return _results;
  };

  Observe.prototype.endAll = function() {
    this.endCacheAll();
    return this.endRepoAll();
  };

  return Observe;

})();

Model = (function() {
  function Model(dataDefine) {
    var body, f, index, k, name, v, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    this.$indices = dataDefine.meta.indices;
    this.$table = dataDefine.meta.table;
    this.$repo = repoGroup[dataDefine.meta.repo] || repoGroup['default'];
    this.$cache = false;
    if (dataDefine.meta.cache) {
      this.$cache = cacheGroup[dataDefine.meta.cache] || cacheGroup['default'];
    }
    this.$nameToField = {};
    _ref = dataDefine.meta.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      this.$nameToField[f.name] = createField(_.cloneDeep(f));
      _ref1 = Object.getPrototypeOf(this.$nameToField[f.name]);
      for (k in _ref1) {
        v = _ref1[k];
        this.$nameToField[f.name][k] = v;
      }
      if (f.validator) {
        _ref2 = Object.getPrototypeOf(f.validator);
        for (name in _ref2) {
          body = _ref2[name];
          this.$nameToField[f.name].validator[name] = body;
        }
      }
    }
    this.$userDefineMethods = [];
    for (k in dataDefine) {
      v = dataDefine[k];
      if (toType(v) === 'function') {
        Model.prototype[k] = v;
        this.$userDefineMethods.push({
          name: k,
          body: v
        });
      }
    }
    this.$sql_findBy = {};
    _ref3 = this.$indices;
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      index = _ref3[_j];
      Model.prototype['findBy' + index.name] = Model.prototype['findBy' + index.fields] = function(value) {
        var i, str, _k, _len2, _ref4;
        str = [];
        _ref4 = index.fields;
        for (i = _k = 0, _len2 = _ref4.length; _k < _len2; i = ++_k) {
          f = _ref4[i];
          str.push("" + this.$nameToField[f].column + " = " + value[i]);
        }
        return Model.prototype.find(str.join(' AND '));
      };
    }
  }

  Model.prototype["new"] = function(vals) {
    return new Instance(this.$table, this.$indices, this.$nameToField, vals, this.$repo, this.$cache, this.$userDefineMethods);
  };

  Model.prototype.find = function(rawSQL, condition) {
    var queryTable;
    queryTable = new QueryTable(this.$table, this.$repo, this.$cache, this, this.$nameToField);
    return queryTable.find(rawSQL, condition);
  };

  return Model;

})();

exports.Model = Model;

exports.Observe = new Observe;
