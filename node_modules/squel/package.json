{
  "name": "squel",
  "description": "SQL query string builder",
  "version": "1.1.3",
  "author": {
    "name": "Ramesh Nair",
    "email": "ram@hiddentao.com",
    "url": "http://www.hiddentao.com/"
  },
  "contributors": [
    {
      "name": "Ramesh Nair",
      "email": "ram@hiddentao.com",
      "url": "http://www.hiddentao.com/"
    },
    {
      "name": "nl_0",
      "email": "nl.imbecile@gmail.com"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "1.6.x",
    "docco": "0.6.x",
    "uglify-js": "1.3.x",
    "chai": "1.5.x",
    "mocha": "1.9.x",
    "sinon": "1.6.x",
    "underscore": "1.4.x"
  },
  "keywords": [
    "sql",
    "database",
    "rdbms"
  ],
  "main": "squel",
  "repository": {
    "type": "git",
    "url": "https://github.com/hiddentao/squel.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "# squel - SQL query string builder for Javascript\n\n[![Build Status](https://secure.travis-ci.org/hiddentao/squel.png)](http://travis-ci.org/hiddentao/squel)\n\nA flexible and powerful SQL query string builder for Javascript.\n\n## Features\n\n* Works in node.js and in the browser.\n* Supports the standard SQL queries: SELECT, UPDATE, INSERT and DELETE.\n* Can be customized to support non-standard queries.\n* Uses method chaining for ease of use.\n* Well tested (~240 tests).\n* Small: ~4 KB minified and gzipped\n\n## Installation\n\n### node.js\n\nInstall using [npm](http://npmjs.org/):\n\n    $ npm install squel\n\n### Browser\n\nUse [bower](https://github.com/bower/bower) if you like:\n\n    $ bower install squel\n\nOr add the following inside your HTML:\n\n    <script type=\"text/javascript\" src=\"https://rawgithub.com/hiddentao/squel/master/squel.min.js\"></script>\n\n**NOTE: It is recommended that you do NOT create queries browser-side to run on the server as this massively increases\nyour exposure to [SQL Injection](http://en.wikipedia.org/wiki/SQL_injection) attacks.**\n\n## Examples\n\nBefore running the examples ensure you have `squel` installed and enabled at the top of your script:\n\n    var squel = require(\"squel\");\n\n**SELECT**\n\n    // SELECT * FROM table\n    squel.select()\n        .from(\"table\")\n        .toString()\n\n    // SELECT t1.id, t1.name as \"My name\", t1.started as \"Date\" FROM table `t1` ORDER BY id ASC LIMIT 20\n    squel.select()\n        .from(\"table\", \"t1\")\n        .field(\"t1.id\")\n        .field(\"t1.name\", \"My name\")\n        .field(\"t1.started\", \"Date\")\n        .order(\"id\")\n        .limit(20)\n        .toString()\n\n    // SELECT t1.id, t2.name FROM table `t1` LEFT JOIN table2 `t2` ON (t1.id = t2.id) WHERE (t2.name <> 'Mark') AND (t2.name <> 'John') GROUP BY t1.id\n    squel.select()\n        .from(\"table\", \"t1\")\n        .field(\"t1.id\")\n        .field(\"t2.name\")\n        .left_join(\"table2\", \"t2\", \"t1.id = t2.id\")\n        .group(\"t1.id\")\n        .where(\"t2.name <> 'Mark'\")\n        .where(\"t2.name <> 'John'\")\n        .toString()\n\nYou can use nested queries too:\n\n    // SELECT s.id FROM (SELECT * FROM students) `s` INNER JOIN (SELECT id FROM marks) `m` ON (m.id = s.id)\n    squel.select()\n        .from( squel.select().from('students'), 's' )\n        .field('id')\n        .join( squel.select().from('marks').field('id'), 'm', 'm.id = s.id' )\n        .toString()\n\n\n**UPDATE**\n\n    // UPDATE test SET f1 = 1\n    squel.update()\n        .table(\"test\")\n        .set(\"f1\", 1)\n        .toString()\n\n    // UPDATE test, test2, test3 AS `a` SET test.id = 1, test2.val = 1.2, a.name = \"Ram\", a.email = NULL\n    squel.update()\n        .table(\"test\")\n        .set(\"test.id\", 1)\n        .table(\"test2\")\n        .set(\"test2.val\", 1.2)\n        .table(\"test3\",\"a\")\n        .set(\"a.name\", \"Ram\")\n        .set(\"a.email\", null)\n        .toString()\n\n**INSERT**\n\n    // INSERT INTO test (f1) VALUES (1)\n    squel.insert()\n        .into(\"test\")\n        .set(\"f1\", 1)\n        .toString()\n\n    // INSERT INTO test (f1, f2, f3, f4, f5) VALUES (1, 1.2, TRUE, \"blah\", NULL)\n    squel.insert()\n        .into(\"test\")\n        .set(\"f1\", 1)\n        .set(\"f2\", 1.2)\n        .set(\"f3\", true)\n        .set(\"f4\", \"blah\")\n        .set(\"f5\", null)\n        .toString()\n\n**DELETE**\n\n    // DELETE FROM test\n    squel.delete()\n        .from(\"test\")\n        .toString()\n\n    // DELETE FROM table1 WHERE (table1.id = 2) ORDER BY id DESC LIMIT 2\n    squel.delete()\n        .from(\"table1\")\n        .where(\"table1.id = ?\", 2)\n        .order(\"id\", false)\n        .limit(2)\n\n**Expression builder**\n\nThere is also an expression builder which allows you to build complex expressions for `WHERE` and `ON` clauses:\n\n    // test = 3 OR test = 4\n    squel.expr()\n        .or(\"test = 3\")\n        .or(\"test = 4\")\n        .toString()\n\n    // test = 3 AND (inner = 1 OR inner = 2) OR (inner = 3 AND inner = 4 OR (inner = 5))\n    squel.expr()\n        .and(\"test = 3\")\n        .and_begin()\n            .or(\"inner = 1\")\n            .or(\"inner = 2\")\n        .end()\n        .or_begin()\n            .and(\"inner = 3\")\n            .and(\"inner = 4\")\n            .or_begin()\n                .and(\"inner = 5\")\n            .end()\n        .end()\n        .toString()\n\n    // SELECT * FROM test INNER JOIN test2 ON (test.id = test2.id) WHERE (test = 3 OR test = 4)\n    squel.select()\n        .join( \"test2\", null, squel.expr().and(\"test.id = test2.id\") )\n        .where( squel.expr().or(\"test = 3\").or(\"test = 4\") )\n\n**Custom value types**\n\nBy default Squel does not support the use of object instances as field values. Instead it lets you tell it how you want\nspecific object types to be handled:\n\n    // handler for objects of type Date\n    squel.registerValueHandler(Date, function(date) {\n      return date.getFullYear() + '/' + date.getMonth() + '/' + date.getDate();\n    });\n\n    squel.update().\n      .table('students')\n      .set('start_date', new Date(2013, 5, 1))\n      .toString()\n\n    // UPDATE students SET start_date = '2013/5/1'\n\n\n_Note that custom value handlers can be overridden on a per-instance basis (see the [docs](http://squeljs.org/))_\n\n**Custom queries**\n\nSquel allows you to override the built-in query builders with your own as well as create your own types of queries:\n\n    // ------------------------------------------------------\n    // Setup the PRAGMA query builder\n    // ------------------------------------------------------\n    var util = require('util');   // to use util.inherits() from node.js\n\n    var CommandBlock = function() {};\n    util.inherits(CommandBlock, squel.cls.Block);\n\n    // private method - will not get exposed within the query builder\n    CommandBlock.prototype._command = function(_command) {\n      this._command = _command;\n    }\n\n    // public method - will get exposed within the query builder\n    CommandBlock.prototype.compress = function() {\n      this._command('compress');\n    };\n\n    CommandBlock.prototype.buildStr = function() {\n      return this._command.toUpperCase();\n    };\n\n\n    // generic parameter block\n    var ParamBlock = function() {};\n    util.inherits(ParamBlock, squel.cls.Block);\n\n    ParamBlock.prototype.param = function(p) {\n      this._p = p;\n    };\n\n    ParamBlock.prototype.buildStr = function() {\n      return this._p;\n    };\n\n\n    // pragma query builder\n    var PragmaQuery = function(options) {\n      squel.cls.QueryBuilder.call(this, options, [\n          new squel.cls.StringBlock(options, 'PRAGMA'),\n          new CommandBlock(),\n          new ParamBlock()\n      ]);\n    };\n    util.inherits(PragmaQuery, squel.cls.QueryBuilder);\n\n\n    // convenience method (we can override built-in squel methods this way too)\n    squel.pragma = function(options) {\n      return new PragmaQuery(options)\n    };\n\n\n    // ------------------------------------------------------\n    // Build a PRAGMA query\n    // ------------------------------------------------------\n\n    squel.pragma()\n      .compress()\n      .param('test')\n      .toString();\n\n    // 'PRAGMA COMPRESS test'\n\n\n## Documentation\n\nFull API documentation is available at [http://squeljs.org/](http://squeljs.org/).\n\nAnnotated source code can be found in the `docs/` folder. This is built using\n[docco](http://jashkenas.github.com/docco/). To build it yourself you will first need to have the latest dev version\nof [pygment](http://pygments.org/download/) installed in your local Python environment. Then do the following inside\nthe project folder:\n\n    $ npm install\n    $ make docs\n\n## Testing\n\nTests are written in [Mocha](http://visionmedia.github.com/mocha/) and can be found in the `test/` folder. To run them do the following:\n\n    $ npm install\n    $ make test\n\n\n## Contributing\n\nIf you wish to submit a pull request please update and/or create new tests for any changes you make and ensure all the\ntests pass.\n\n---\n\nHomepage: [http://squeljs.org](http://squeljs.org/)\nSource: [https://github.com/hiddentao/squel](https://github.com/hiddentao/squel)\n\n\nCopyright (c) 2012 [Ramesh Nair](http://www.hiddentao.com/)\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "squel@1.1.3",
  "dist": {
    "shasum": "69de32ca876b0a0509b4cf23cd73a2d29cbed818"
  },
  "_from": "squel@*",
  "_resolved": "https://registry.npmjs.org/squel/-/squel-1.1.3.tgz"
}
